   1 0000               # File:		$Id$
   2 0000               # Author:	J. Heliotis, (author's version 1.3)
   3 0000               # Contributors:	K. Reek, 
   4 0000               # 		P. White, 
   5 0000               #		Luke Ward
   6 0000               # Description:	This program reads a description of a geometric
   7 0000               #		figure from standard input and displays some
   8 0000               #		further information about it. Currently, the
   9 0000               #		program handles two types of figures: blocks
  10 0000               #		(rectangles) and circles.
  11 0000               #
  12 0000               # Purpose:	To demonstrate the implementation of polymorphic
  13 0000               #		subroutine calls
  14 0000               #
  15 0000               # Revisions:	$Log$
  16 0000               #		4/1/04	M. Reek changed to use MIPS linkage conventions
  17 0000               #
  18 0000               # CONSTANTS
  19 0000               #
  20 0000               # syscall codes
  21 0000               PRINT_INT =	1
  22 0000               PRINT_STRING = 	4
  23 0000               READ_INT = 	5
  24 0000               READ_STRING =	8
  25 0000               
  26 0000               # various frame sizes used by different routines
  27 0000               
  28 0000               FRAMESIZE_8 = 	8
  29 0000               FRAMESIZE_24 =	24
  30 0000               FRAMESIZE_40 =	40
  31 0000               FRAMESIZE_48 =	48
  32 0000               
  33 0000               	.data
  34 0000               	.align 2
  35 0000               
  36 0000               	#
  37 0000               	# Memory for allocating up to 100 figures.
  38 0000               	#
  39 0000               next:	
  40 0000 00000004		.word	pool		# ptr into the pool where next free
  41 0004               				# space is located
  42 0004               pool:	
  43 0004 00000000		.space	1200		# room for 100 figures
          00000000
          00000000
          00000000
          00000000
          00000000
  44 04b4               pool_end:			# a marker for the end of the free space
  45 04b4 00000000		.word	0		# used to tell us if we are out of mem
  46 04b8               
  47 04b8               fig_width:
  48 04b8 00000000		.word	0
  49 04bc               fig_height:
  50 04bc 00000000		.word	0
  51 04c0               
  52 04c0               	.align 0
  53 04c0               fig_char:
  54 04c0 30313233		.asciiz	"0123456789"	# I know this isn't a character, but
          34353637
          383900  
  55 04cb               				# SPIMs only has read_string, which 
  56 04cb               				# reads to eol and then null
  57 04cb               				# terminates the string it read in
  58 04cb               
  59 04cb               	#
  60 04cb               	# some constants for the code
  61 04cb               	#
  62 04cb               PI	= 3			# an bad integer approx. to pi, 3.14159...
  63 04cb               
  64 04cb               char_c:	
  65 04cb 43      		.ascii	"C"
  66 04cc               char_b:	
  67 04cc 42      		.ascii	"B"
  68 04cd               
  69 04cd               new_error:
  70 04cd 4F757420		.asciiz	"Out of memory for allocating figures.\n"
          6F66206D
          656D6F72
          7920666F
          7220616C
          6C6F6361
  71 04f4               
  72 04f4               figure_type_error_string:
  73 04f4 496C6C65		.asciiz	"Illegal figure type\n"
          67616C20
          66696775
          72652074
          7970650A
          00      
  74 0509               
  75 0509               circle_string:
  76 0509 43697263		.asciiz	"Circle ("
          6C652028
          00      
  77 0512               
  78 0512               block_string:
  79 0512 426C6F63		.asciiz	"Block ("
          6B202800
  80 051a               
  81 051a               comma_string:
  82 051a 2C00    		.asciiz	","
  83 051c               
  84 051c               area_string:
  85 051c 29202D20		.asciiz	") - area = "
          61726561
          203D2000
  86 0528               
  87 0528               perimeter_string:
  88 0528 3B207065		.asciiz	"; perimeter = "
          72696D65
          74657220
          3D2000  
  89 0537               
  90 0537               new_line:
  91 0537 0A00    		.asciiz	"\n"
  92 0539               
  93 0539               #
  94 0539               # Name:		MAIN PROGRAM
  95 0539               #
  96 0539               # Description:	Main logic for the program.
  97 0539               #
  98 0539               #		The program reads three values from standard input:
  99 0539               #		1) a character representing the type of figure to create
 100 0539               #		2) an integer representing the width of the bounding box
 101 0539               #			of the figure
 102 0539               #		3) an integer representing the height of the bounding box
 103 0539               #			of the figure
 104 0539               #
 105 0539               #		After creating the specified figure object, the program then
 106 0539               #		displays all available information on the object created.
 107 0539               #
 108 0539               
 109 0000               	.text			# this is program code
 110 0000               	.align 2		# instructions must be on word boundaries
 111 0000               	.globl main		# main is a global label
 112 0000               
 113 0000               main:
 114 0000               	# allocate stack frame according to formula & save state
 115 0000               
 116 0000 23BDFFE8		addi 	$sp, $sp,-FRAMESIZE_24   	
 117 0004 AFBF0014		sw 	$ra, -4+FRAMESIZE_24($sp)	
 118 0008 AFB10010		sw 	$s1, -8+FRAMESIZE_24($sp)
 119 000c AFB0000C		sw 	$s0, -12+FRAMESIZE_24($sp)
 120 0010               
 121 0010               	#
 122 0010               	# Read the character representing the figure type
 123 0010               	#
 124 0010               
 125 0010 34020008		li 	$v0, READ_STRING	# read a string	
 126 0014 3C040000		la 	$a0, fig_char	# place to store the char read in
     0018 34840000
 127 001c 20050009		addi	$a1, $zero, 9	# the number of characters to read
 128 0020 0000000C		syscall
 129 0024               
 130 0024               	#
 131 0024               	# Read the width into r1
 132 0024               	#
 133 0024 34020005		li	$v0, READ_INT
 134 0028 0000000C		syscall
 135 002c 00408021		move	$s0, $v0
 136 0030               
 137 0030               	#
 138 0030               	# Read the height into r2
 139 0030               	#
 140 0030 34020005		li	$v0, READ_INT
 141 0034 0000000C		syscall
 142 0038 00408821		move	$s1, $v0
 143 003c               
 144 003c               	#
 145 003c               	# Do the output
 146 003c               	#
 147 003c 02002021		move	$a0, $s0
 148 0040 02202821		move	$a1, $s1
 149 0044 0C000076		jal	output_figures
 150 0048               
 151 0048               #
 152 0048               # All done -- exit the program!
 153 0048               #
 154 0048 8FBF0014		lw 	$ra, -4+FRAMESIZE_24($sp)	
 155 004c 8FB10010		lw 	$s1, -8+FRAMESIZE_24($sp)
 156 0050 8FB0000C		lw 	$s0, -12+FRAMESIZE_24($sp)
 157 0054               
 158 0054 23BD0018		addi 	$sp, $sp, FRAMESIZE_24   	
 159 0058 03E00008		jr 	$ra		# return from main and exit spim
 160 005c               	
 161 005c               
 162 005c               # ***********************************************************************
 163 005c               # *                                                                     *
 164 005c               # * THIS IS THE START OF EXPERIMENT-SPECIFIC CODE                       *
 165 005c               # *                                                                     *
 166 005c               # ***********************************************************************
 167 005c               
 168 005c               # Name:		Constants to keep in mind while working with figures
 169 005c               #
 170 005c               
 171 005c               # A Figure contains three words 
 172 005c               #		address of virtual function table at offset 0 in fig object
 173 005c               #		figure width 	at offset 4 in fig object
 174 005c               #		figure height 	at offset 8 in fig object
 175 005c               # Making the figures size as 12 bytes
 176 005c               
 177 005c               # A Figure virtual function table contains two function addresses (words):
 178 005c               #		addr area function 	at offset 0 in vtable
 179 005c               #		addr perimeter function	at offset 4 in vtable
 180 005c               #
 181 005c               
 182 005c               #
 183 005c               # Name:		new_figure
 184 005c               #
 185 005c               # Description:	Allocate space for a new figure from the pool of
 186 005c               #		available space. Luckily, both subclasses of FIGURE
 187 005c               #		take up the same amount of space.
 188 005c               #
 189 005c               # Arguments:	None.
 190 005c               # Returns:	v0: the address of the newly allocated figure.
 191 005c               #
 192 005c               
 193 005c               new_figure:
 194 005c               	#
 195 005c               	# See if there is any space left in the pool.
 196 005c               	#
 197 005c               
 198 005c 3C010000		lw	$t0, next
     0060 8C280000
 199 0064 3C090000		la	$t1, pool_end
     0068 35290000
 200 006c               
 201 006c 0109502A		slt	$t2, $t0, $t1	# Compare next addr to end of pool
 202 0070 15400006		bne	$t2, $zero, new_figure_ok	#  if less, still have space
 203 0074               
 204 0074               	#
 205 0074               	# No space left; write error message and exit.
 206 0074               	#
 207 0074               
 208 0074 34020004		li 	$v0, PRINT_STRING	# print error message
 209 0078 3C040000		la 	$a0, new_error
     007c 34840000
 210 0080 0000000C		syscall	
 211 0084               
 212 0084 3402000A		li 	$v0, 10		# terminate program
 213 0088 0000000C		syscall	
 214 008c               
 215 008c               new_figure_ok:
 216 008c               	#
 217 008c               	# There is space available.  Allocate the next figure, and
 218 008c               	# initialize all of its fields.
 219 008c               	#
 220 008c               
 221 008c 01001021		move	$v0, $t0	# set up to return spot for new figure
 222 0090 2108000C		addi	$t0, $t0, 12	# Adjust pointer to next figure
 223 0094 3C010000		sw	$t0, next
     0098 AC280000
 224 009c               
 225 009c               	#
 226 009c               	# Clear all fields.
 227 009c               	#
 228 009c               
 229 009c AC400000		sw	$zero, 0($v0)
 230 00a0 AC400004		sw	$zero, 4($v0)
 231 00a4 AC400008		sw	$zero, 8($v0)
 232 00a8               
 233 00a8 03E00008		jr	$ra
 234 00ac               
 235 00ac               
 236 00ac               #
 237 00ac               # Name:		figure_make
 238 00ac               #
 239 00ac               # Description:	Initialize the components of the figure object.
 240 00ac               #		Since FIGURE is an abstract class, it is expected that
 241 00ac               #		the creation subroutines for child classes will call this
 242 00ac               #		subroutine.
 243 00ac               #
 244 00ac               # Arguments:	a0 contains the height of the figure's bounding box
 245 00ac               #		a1 contains the width of the figure's bounding box
 246 00ac               #		a2 contains the address of the figure object
 247 00ac               #
 248 00ac               figure_make:
 249 00ac               
 250 00ac ACC50004		sw 	$a1, 4($a2)	# store the width in the fig object
 251 00b0 ACC40008		sw 	$a0, 8($a2)	# store the height in the fig object
 252 00b4               
 253 00b4 03E00008		jr	$ra
 254 00b8               
 255 00b8               # CODE FOR FIGURE SUBCLASS BLOCK
 256 00b8               
 257 00b8               #***** BEGIN STUDENT CODE BLOCK 1 ********************************
 258 00b8               #
 259 00b8               # Using the circle code below as your guide, write everything
 260 00b8               # necessary to implement the FIGURE child class called BLOCK.
 261 00b8               # This involves defining BLOCK's virtual function table, its
 262 00b8               # creation routine, block_make, and its two virtual (polymorphic)
 263 00b8               # functions, block_area and block_perimeter.
 264 00b8               #
 265 0539               	.data
 266 0539 000000  		.align 2
 267 053c               
 268 053c               block_vtbl:
 269 053c 00000000		.word block_area
 270 0540 00000000		.word block_perimeter
 271 0544               
 272 00b8               	.text
 273 00b8               
 274 00b8               # Name:		block_make
 275 00b8               #
 276 00b8               # Description:	Initialize the components of the block object
 277 00b8               #		All this subroutine does is set the virtual function
 278 00b8               #		table, then call figure_make.
 279 00b8               #
 280 00b8               # Arguments:	a0 contains the height of the figure's bounding box
 281 00b8               #		a1 contains the width of the figure's bounding box
 282 00b8               #		a2 contains the address of the figure object
 283 00b8               
 284 00b8               block_make:
 285 00b8 23BDFFF8		addi $sp, $sp,-FRAMESIZE_8
 286 00bc AFBF0004		sw $ra, -4+FRAMESIZE_8($sp)
 287 00c0               
 288 00c0 3C090000		la	$t1, block_vtbl	# get block's vtable pointer
     00c4 35290000
 289 00c8 ACC90000		sw	$t1, 0($a2)	# put block's vtable pointer into this fig
 290 00cc               				# object
 291 00cc 0C00002B		jal	figure_make
 292 00d0               
 293 00d0 8FBF0004		lw 	$ra, -4+FRAMESIZE_8($sp)  # get ra off stack, and restore
 294 00d4 23BD0008		addi 	$sp, $sp, FRAMESIZE_8
 295 00d8 03E00008		jr	$ra
 296 00dc               
 297 00dc               #
 298 00dc               # Name:		block_area
 299 00dc               #
 300 00dc               # Description:	Compute the area of the block figure
 301 00dc               #
 302 00dc               # Arguments:	a0 contains the address of the figure object
 303 00dc               #
 304 00dc               # Returns:	v0 contains the area
 305 00dc               #
 306 00dc               block_area:
 307 00dc 23BDFFF8		addi 	$sp, $sp,-FRAMESIZE_8
 308 00e0 AFBF0004		sw 	$ra, -4+FRAMESIZE_8($sp)
 309 00e4               
 310 00e4 8C880004		lw	$t0, 4($a0)	# get fig's width
 311 00e8 8C890008		lw	$t1, 8($a0)	# get fig's height
 312 00ec 01280018		mul $v0, $t1, $t0
     00f0 00001012
 313 00f4               
 314 00f4 8FBF0004		lw 	$ra, -4+FRAMESIZE_8($sp)	# restore ra from stack
 315 00f8 23BD0008		addi 	$sp, $sp, FRAMESIZE_8
 316 00fc 03E00008		jr	$ra
 317 0100               
 318 0100               #
 319 0100               # Name:		block_perimeter
 320 0100               #
 321 0100               # Description:	Compute the perimeter of the block figure
 322 0100               #
 323 0100               # Arguments:	a0 contains the address of the figure object
 324 0100               #
 325 0100               # Returns:	v0 contains the perimeter
 326 0100               #
 327 0100               block_perimeter:
 328 0100 23BDFFF8		addi 	$sp, $sp,-FRAMESIZE_8
 329 0104 AFBF0004		sw 	$ra, -4+FRAMESIZE_8($sp)
 330 0108               
 331 0108 8C880004		lw	$t0, 4($a0)	# get fig's width
 332 010c 8C890008		lw	$t1, 8($a0)	# get fig's height
 333 0110 34010002		mul $t0, $t0, 2
     0114 01010018
     0118 00004012
 334 011c 34010002		mul $t1, $t1, 2
     0120 01210018
     0124 00004812
 335 0128 01091020		add $v0, $t0, $t1
 336 012c               
 337 012c 8FBF0004		lw 	$ra, -4+FRAMESIZE_8($sp)	# restore ra from stack
 338 0130 23BD0008		addi 	$sp, $sp, FRAMESIZE_8
 339 0134 03E00008		jr	$ra
 340 0138               
 341 0138               
 342 0138               #***** END STUDENT CODE BLOCK 1 **********************************
 343 0138               
 344 0138               # CODE FOR FIGURE SUBCLASS CIRCLE
 345 0138               
 346 0138               #************************************
 347 0544               	.data
 348 0544               	.align	2
 349 0544               
 350 0544               circle_vtbl:
 351 0544 00000000		.word	circle_area
 352 0548 00000000		.word	circle_perimeter
 353 054c               
 354 0138               	.text
 355 0138               #************************************
 356 0138               #
 357 0138               # Name:		circle_make
 358 0138               #
 359 0138               # Description:	Initialize the components of the circle object
 360 0138               #		All this subroutine does is set the virtual function
 361 0138               #		table, then call figure_make.
 362 0138               #
 363 0138               # Arguments:	a0 contains the height of the figure's bounding box
 364 0138               #		a1 contains the width of the figure's bounding box
 365 0138               #		a2 contains the address of the figure object
 366 0138               #
 367 0138               
 368 0138               circle_make:
 369 0138 23BDFFF8		addi 	$sp, $sp,-FRAMESIZE_8
 370 013c AFBF0004		sw 	$ra, -4+FRAMESIZE_8($sp)
 371 0140               
 372 0140 3C090000		la	$t1, circle_vtbl	# get circle's vtable pointer
     0144 35290000
 373 0148 ACC90000		sw	$t1, 0($a2)	# put circle's vtable pointer into this fig
 374 014c               				# object
 375 014c 0C00002B		jal	figure_make
 376 0150               
 377 0150 8FBF0004		lw 	$ra, -4+FRAMESIZE_8($sp)  # get ra off stack, and restore
 378 0154 23BD0008		addi 	$sp, $sp, FRAMESIZE_8
 379 0158 03E00008		jr	$ra
 380 015c               
 381 015c               #
 382 015c               # Name:		circle_area
 383 015c               #
 384 015c               # Description:	Compute the area of the circle figure
 385 015c               #
 386 015c               # Arguments:	a0 contains the address of the figure object
 387 015c               #
 388 015c               # Returns:	v0 contains the area
 389 015c               #
 390 015c               circle_area:
 391 015c 23BDFFF8		addi 	$sp, $sp,-FRAMESIZE_8
 392 0160 AFBF0004		sw 	$ra, -4+FRAMESIZE_8($sp)
 393 0164               
 394 0164 34190003		li	$t9, PI		# get our int approx. for PI = 3
 395 0168               
 396 0168 0C00006E		jal	circle_diameter	# get my diameter in v0
 397 016c               	
 398 016c 34010002		div	$t0, $v0, 2	# t0 = radius
     0170 0041001A
     0174 00004012
 399 0178 01080018		mul	$t1, $t0, $t0	# t1 = radius squared
     017c 00004812
 400 0180 01390018		mul	$v0, $t1, $t9	# v0 = PI * radius squared
     0184 00001012
 401 0188               
 402 0188 8FBF0004		lw 	$ra, -4+FRAMESIZE_8($sp)	# restore ra from stack
 403 018c 23BD0008		addi 	$sp, $sp, FRAMESIZE_8
 404 0190 03E00008		jr	$ra
 405 0194               
 406 0194               #
 407 0194               # Name:		circle_perimeter
 408 0194               #
 409 0194               # Description:	Compute the perimeter of the circle figure
 410 0194               #
 411 0194               # Arguments:	a0 contains the address of the figure object
 412 0194               #
 413 0194               # Returns:	v0 contains the perimeter
 414 0194               #
 415 0194               circle_perimeter:
 416 0194 23BDFFF8		addi 	$sp, $sp,-FRAMESIZE_8
 417 0198 AFBF0004		sw 	$ra, -4+FRAMESIZE_8($sp)
 418 019c               
 419 019c 34190003		li	$t9, PI		# get our int approx. for PI = 3
 420 01a0               
 421 01a0 0C00006E		jal	circle_diameter	# get my diameter in v0
 422 01a4               	
 423 01a4 00590018		mul	$v0, $v0, $t9	# v0 = PI * diameter
     01a8 00001012
 424 01ac               
 425 01ac 8FBF0004		lw 	$ra, -4+FRAMESIZE_8($sp)	# restore ra from stack
 426 01b0 23BD0008		addi 	$sp, $sp, FRAMESIZE_8
 427 01b4 03E00008		jr	$ra
 428 01b8               
 429 01b8               #
 430 01b8               # Name:		circle_diameter
 431 01b8               #
 432 01b8               # Description:	Compute the diameter of the circle figure
 433 01b8               #
 434 01b8               # Arguments:	a0 contains the address of the figure object
 435 01b8               #
 436 01b8               # Returns:	v0 contains the diameter
 437 01b8               #
 438 01b8               circle_diameter:
 439 01b8 8C880004		lw	$t0, 4($a0)	# get fig's width
 440 01bc 8C890008		lw	$t1, 8($a0)	# get fig's height
 441 01c0               
 442 01c0 0109502A		slt	$t2, $t0, $t1	# see if width < height
 443 01c4 11400002		beq	$t2, $zero, cd_height_bigger
 444 01c8               
 445 01c8 01001021		move	$v0, $t0	# width is smaller
 446 01cc 03E00008		jr	$ra
 447 01d0               
 448 01d0               cd_height_bigger:
 449 01d0 01201021		move	$v0, $t1	# height is smaller
 450 01d4 03E00008		jr	$ra
 451 01d8               
 452 01d8               #
 453 01d8               # Name:		output_figures
 454 01d8               #
 455 01d8               # Description:	Given the paramters for a figure, make one and print out
 456 01d8               #		its attributes.
 457 01d8               #
 458 01d8               # Arguments:	fig_char: Character representing figure type
 459 01d8               #		a0: width
 460 01d8               #		a1: height
 461 01d8               #
 462 01d8               #
 463 01d8               output_figures:
 464 01d8 23BDFFD0		addi	$sp, $sp,-FRAMESIZE_48
 465 01dc AFBF002C		sw	$ra, -4+FRAMESIZE_48($sp)
 466 01e0 AFB70028		sw	$s7, -8+FRAMESIZE_48($sp)
 467 01e4 AFB60024		sw	$s6, -12+FRAMESIZE_48($sp)
 468 01e8 AFB50020		sw	$s5, -16+FRAMESIZE_48($sp)
 469 01ec AFB4001C		sw	$s4, -20+FRAMESIZE_48($sp)
 470 01f0 AFB30018		sw	$s3, -24+FRAMESIZE_48($sp)
 471 01f4 AFB20014		sw	$s2, -28+FRAMESIZE_48($sp)
 472 01f8 AFB10010		sw	$s1, -32+FRAMESIZE_48($sp)
 473 01fc AFB0000C		sw	$s0, -36+FRAMESIZE_48($sp)
 474 0200               
 475 0200 00809821		move	$s3, $a0	# s3 will be the width
 476 0204 00A0A021		move	$s4, $a1	# s4 will be the height
 477 0208               
 478 0208 0C000017		jal	new_figure	# create a new figure
 479 020c 00408821		move	$s1, $v0	# save the pointer to the fig object
 480 0210               
 481 0210               	#
 482 0210               	# Now, see which one we should make
 483 0210               	#
 484 0210               
 485 0210 3C010000		lbu	$s6, char_c	# get our characters for comparison
     0214 90360000
 486 0218 3C010000		lbu	$s7, char_b
     021c 90370000
 487 0220               
 488 0220 3C010000		lbu	$s5, fig_char	# get the type of fig to create
     0224 90350000
 489 0228               
 490 0228 16B6000B		bne	$s5, $s6, not_circle  # see if creating a circle
 491 022c               	#
 492 022c               	# Set up the arguments to the circle_make call
 493 022c               	# 	a0 contains the height of the figure's bounding box
 494 022c               	# 	a1 contains the width of the figure's bounding box
 495 022c               	#	a2 contains the address of the figure object
 496 022c               	#
 497 022c 02802021		move	$a0, $s4		# s4 was the height
 498 0230 02602821		move	$a1, $s3		# s3 was the width
 499 0234 02203021		move	$a2, $s1		# s1 was the location of new fig object
 500 0238 0C00004E		jal	circle_make
 501 023c               
 502 023c               
 503 023c               	#
 504 023c               	# Print "Circle ("
 505 023c               	#
 506 023c               
 507 023c 34020004		li 	$v0, PRINT_STRING	# print a "Circle ("
 508 0240 3C040000		la 	$a0, circle_string
     0244 34840000
 509 0248 0000000C		syscall	
 510 024c               
 511 024c 02202021		move	$a0, $s1		# send the pointer to the fig object
 512 0250               				# as the arg. to print_rest
 513 0250 0C0000B1		jal	print_rest	# print rest of info of the fig
 514 0254 080000A6		j 	done_output
 515 0258               
 516 0258               
 517 0258               not_circle:
 518 0258 16B7000B		bne	$s5, $s7, not_anything  # see if creating a block
 519 025c               	#
 520 025c               	# Set up the arguments to the block_make call
 521 025c               	# 	a0 contains the height of the figure's bounding box
 522 025c               	# 	a1 contains the width of the figure's bounding box
 523 025c               	#	a2 contains the address of the figure object
 524 025c               	#
 525 025c 02802021		move	$a0, $s4		# s4 was the height
 526 0260 02602821		move	$a1, $s3		# s3 was the width
 527 0264 02203021		move	$a2, $s1		# s1 was the location of new fig object
 528 0268 0C00002E		jal	block_make
 529 026c               
 530 026c               
 531 026c               	#
 532 026c               	# Print "Block ("
 533 026c               	#
 534 026c               
 535 026c 34020004		li 	$v0, PRINT_STRING	# print a "Block ("
 536 0270 3C040000		la 	$a0, block_string
     0274 34840000
 537 0278 0000000C		syscall	
 538 027c               
 539 027c 02202021		move	$a0, $s1		# send the pointer to the fig object
 540 0280               				# as the arg. to print_rest
 541 0280 0C0000B1		jal	print_rest	# print rest of info of the fig
 542 0284 080000A6		j 	done_output
 543 0288               
 544 0288               not_anything:
 545 0288               	#
 546 0288               	# Print error message
 547 0288               	#
 548 0288               
 549 0288 34020004		li 	$v0, PRINT_STRING
 550 028c 3C040000		la 	$a0, figure_type_error_string
     0290 34840000
 551 0294 0000000C		syscall	
 552 0298               
 553 0298               	#
 554 0298               	# exit
 555 0298               	#
 556 0298               
 557 0298               done_output:
 558 0298 8FBF002C		lw	$ra, -4+FRAMESIZE_48($sp)
 559 029c 8FB70028		lw	$s7, -8+FRAMESIZE_48($sp)
 560 02a0 8FB60024		lw	$s6, -12+FRAMESIZE_48($sp)
 561 02a4 8FB50020		lw	$s5, -16+FRAMESIZE_48($sp)
 562 02a8 8FB4001C		lw	$s4, -20+FRAMESIZE_48($sp)
 563 02ac 8FB30018		lw	$s3, -24+FRAMESIZE_48($sp)
 564 02b0 8FB20014		lw	$s2, -28+FRAMESIZE_48($sp)
 565 02b4 8FB10010		lw	$s1, -32+FRAMESIZE_48($sp)
 566 02b8 8FB0000C		lw	$s0, -36+FRAMESIZE_48($sp)
 567 02bc 23BD0030		addi	$sp, $sp, FRAMESIZE_48
 568 02c0               
 569 02c0 03E00008		jr	$ra
 570 02c4               
 571 02c4               #
 572 02c4               # Name:		print_rest
 573 02c4               #
 574 02c4               # Description:	prints out the information about a figure
 575 02c4               #
 576 02c4               # Arguments:	a0: contains the address of the figure object
 577 02c4               #
 578 02c4               
 579 02c4               print_rest:
 580 02c4               	#
 581 02c4               	# Save all the S registers & ra
 582 02c4               	#
 583 02c4 23BDFFD8		addi	$sp, $sp,-FRAMESIZE_40
 584 02c8 AFBF0024		sw	$ra, -4+FRAMESIZE_40($sp)
 585 02cc AFB70020		sw	$s7, -8+FRAMESIZE_40($sp)
 586 02d0 AFB6001C		sw	$s6, -12+FRAMESIZE_40($sp)
 587 02d4 AFB50018		sw	$s5, -16+FRAMESIZE_40($sp)
 588 02d8 AFB40014		sw	$s4, -20+FRAMESIZE_40($sp)
 589 02dc AFB30010		sw	$s3, -24+FRAMESIZE_40($sp)
 590 02e0 AFB2000C		sw	$s2, -28+FRAMESIZE_40($sp)
 591 02e4 AFB10008		sw	$s1, -32+FRAMESIZE_40($sp)
 592 02e8 AFB00004		sw	$s0, -36+FRAMESIZE_40($sp)
 593 02ec               
 594 02ec 00808021		move	$s0, $a0	# s0 will be your pointer to figure
 595 02f0               				# since a0 is needed by the syscalls
 596 02f0               
 597 02f0               #***** BEGIN STUDENT CODE BLOCK 2 ********************************
 598 02f0               #
 599 02f0               # Print the figure's width using PRINT_INT. At this point, s0 contains
 600 02f0               # the address of the figure object, and shouldn't be changed.
 601 02f0               #
 602 02f0               # Note that this does not involve any polymorphic functions.
 603 02f0               #
 604 02f0 8E080004		lw	$t0, 4($s0)	# get fig's width
 605 02f4 34020001		li $v0, PRINT_INT
 606 02f8 01002021		move $a0, $t0
 607 02fc 0000000C		syscall
 608 0300               
 609 0300               #***** END STUDENT CODE BLOCK 2 **********************************
 610 0300               
 611 0300 34020004		li 	$v0, PRINT_STRING	# print ','
 612 0304 3C040000		la 	$a0, comma_string
     0308 34840000
 613 030c 0000000C		syscall
 614 0310               
 615 0310               #***** BEGIN STUDENT CODE BLOCK 3 ********************************
 616 0310               #
 617 0310               # Print the figure's height using PRINT_INT. At this point, s0 contains
 618 0310               # the address of the figure object, and shouldn't be changed.
 619 0310               #
 620 0310               # Note that this does not involve any polymorphic functions.
 621 0310               #
 622 0310               	
 623 0310 8E080008		lw	$t0, 8($s0) # get fig's height
 624 0314 34020001		li $v0, PRINT_INT
 625 0318 01002021		move $a0, $t0
 626 031c 0000000C		syscall
 627 0320               
 628 0320               #***** END STUDENT CODE BLOCK 3 **********************************
 629 0320               	
 630 0320 34020004		li 	$v0, PRINT_STRING 	# print ') - area = '
 631 0324 3C040000		la 	$a0, area_string
     0328 34840000
 632 032c 0000000C		syscall
 633 0330               
 634 0330               #***** BEGIN STUDENT CODE BLOCK 4 ********************************
 635 0330               #
 636 0330               # Print the figure's area using PRINT_INT. At this point, s0 contains
 637 0330               # the address of the figure object, and shouldn't be changed.
 638 0330               #
 639 0330 8E080000		lw $t0, 0($s0)
 640 0334 8D090000		lw $t1, 0($t0)
 641 0338 02002021		move $a0, $s0
 642 033c 0120F809		jalr $t1
 643 0340 00402021		move $a0, $v0
 644 0344 34020001		li $v0, PRINT_INT
 645 0348 0000000C		syscall
 646 034c               
 647 034c               #***** END STUDENT CODE BLOCK 4 **********************************
 648 034c               	
 649 034c 34020004		li 	$v0, PRINT_STRING	# print '; perimeter = '
 650 0350 3C040000		la 	$a0, perimeter_string
     0354 34840000
 651 0358 0000000C		syscall
 652 035c               
 653 035c               #***** BEGIN STUDENT CODE BLOCK 5 ********************************
 654 035c               #
 655 035c               # Print the figure's perimeter using PRINT_INT. At this point, s0
 656 035c               # contains the address of the figure object, and shouldn't be changed.
 657 035c               #
 658 035c               
 659 035c 8E080000		lw $t0, 0($s0)
 660 0360 8D090004		lw $t1, 4($t0)
 661 0364 02002021		move $a0, $s0
 662 0368 0120F809		jalr $t1
 663 036c 00402021		move $a0, $v0
 664 0370 34020001		li $v0, PRINT_INT
 665 0374 0000000C		syscall
 666 0378               
 667 0378               #***** END STUDENT CODE BLOCK 5 **********************************
 668 0378               
 669 0378               	
 670 0378 34020004		li 	$v0, PRINT_STRING	# print newline
 671 037c 3C040000		la 	$a0, new_line
     0380 34840000
 672 0384 0000000C		syscall
 673 0388               
 674 0388               	#
 675 0388               	# Restore all the S registers
 676 0388               	#
 677 0388 8FBF0024		lw	$ra, -4+FRAMESIZE_40($sp)
 678 038c 8FB70020		lw	$s7, -8+FRAMESIZE_40($sp)
 679 0390 8FB6001C		lw	$s6, -12+FRAMESIZE_40($sp)
 680 0394 8FB50018		lw	$s5, -16+FRAMESIZE_40($sp)
 681 0398 8FB40014		lw	$s4, -20+FRAMESIZE_40($sp)
 682 039c 8FB30010		lw	$s3, -24+FRAMESIZE_40($sp)
 683 03a0 8FB2000C		lw	$s2, -28+FRAMESIZE_40($sp)
 684 03a4 8FB10008		lw	$s1, -32+FRAMESIZE_40($sp)
 685 03a8 8FB00004		lw	$s0, -36+FRAMESIZE_40($sp)
 686 03ac 23BD0028		addi	$sp, $sp, FRAMESIZE_40
 687 03b0               
 688 03b0 03E00008		jr	$ra


          Name            F  Value   M V Sect.                               References
------------------------  - -------- - - ----- -----------------------------------------------------------------------
FRAMESIZE_24                00000018 =         @   29, 116, 117, 118, 119, 154, 155, 156, 158
FRAMESIZE_40                00000028 =         @   30, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 677, 678, 679
                                               @  680, 681, 682, 683, 684, 685, 686
FRAMESIZE_48                00000030 =         @   31, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 558, 559, 560
                                               @  561, 562, 563, 564, 565, 566, 567
FRAMESIZE_8                 00000008 =         @   28, 285, 286, 293, 294, 307, 308, 314, 315, 328, 329, 337, 338, 369
                                               @  370, 377, 378, 391, 392, 402, 403, 416, 417, 425, 426
PI                          00000003 =         @   62, 394, 419
PRINT_INT                   00000001 =         @   21, 605, 624, 644, 664
PRINT_STRING                00000004 =         @   22, 208, 507, 535, 549, 611, 630, 649, 670
READ_INT                    00000005 =         @   23, 133, 140
READ_STRING                 00000008 =         @   24, 125
area_string                 0000051C R   data  @   84, 631
block_area                  000000DC R   text  @  269, 306
block_make                  000000B8 R   text  @  284, 528
block_perimeter             00000100 R   text  @  270, 327
block_string                00000512 R   data  @   78, 536
block_vtbl                  0000053C R   data  @  268, 288
cd_height_bigger            000001D0 R   text  @  443, 448
char_b                      000004CC R   data  @   66, 486
char_c                      000004CB R   data  @   64, 485
circle_area                 0000015C R   text  @  351, 390
circle_diameter             000001B8 R   text  @  396, 421, 438
circle_make                 00000138 R   text  @  368, 500
circle_perimeter            00000194 R   text  @  352, 415
circle_string               00000509 R   data  @   75, 508
circle_vtbl                 00000544 R   data  @  350, 372
comma_string                0000051A R   data  @   81, 612
done_output                 00000298 R   text  @  514, 542, 557
fig_char                    000004C0 R   data  @   53, 126, 488
fig_height                  000004BC R   data  @   49
fig_width                   000004B8 R   data  @   47
figure_make                 000000AC R   text  @  248, 291, 375
figure_type_error_string    000004F4 R   data  @   72, 550
main                        00000000 R G text  @  111, 113
new_error                   000004CD R   data  @   69, 209
new_figure                  0000005C R   text  @  193, 478
new_figure_ok               0000008C R   text  @  202, 215
new_line                    00000537 R   data  @   90, 671
next                        00000000 R   data  @   39, 198, 223
not_anything                00000288 R   text  @  518, 544
not_circle                  00000258 R   text  @  490, 517
output_figures              000001D8 R   text  @  149, 463
perimeter_string            00000528 R   data  @   87, 650
pool                        00000004 R   data  @   40,  42
pool_end                    000004B4 R   data  @   44, 199
print_rest                  000002C4 R   text  @  513, 541, 579
