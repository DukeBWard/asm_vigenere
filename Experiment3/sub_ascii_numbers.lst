   1 0000               # File:		sub_ascii_numbers.asm
   2 0000               # Author:	K. Reek
   3 0000               # Contributors:	P. White, W. Carithers
   4 0000               #		Luke Ward
   5 0000               #
   6 0000               # Updates:
   7 0000               #		3/2004	M. Reek, named constants
   8 0000               #		10/2007 W. Carithers, alignment
   9 0000               #		09/2009 W. Carithers, separate assembly
  10 0000               #
  11 0000               # Description:	sub two ASCII numbers and store the result in ASCII.
  12 0000               #
  13 0000               # Arguments:	a0: address of parameter block.  The block consists of
  14 0000               #		four words that contain (in this order):
  15 0000               #
  16 0000               #			address of first input string
  17 0000               #			address of second input string
  18 0000               #			address where result should be stored
  19 0000               #			length of the strings and result buffer
  20 0000               #
  21 0000               #		(There is actually other data after this in the
  22 0000               #		parameter block, but it is not relevant to this routine.)
  23 0000               #
  24 0000               # Returns:	The result of the subtraction, in the buffer specified by
  25 0000               #		the parameter block.
  26 0000               #
  27 0000               
  28 0000               	.globl	sub_ascii_numbers
  29 0000               
  30 0000               sub_ascii_numbers:
  31 0000               A_FRAMESIZE = 40
  32 0000               
  33 0000               #
  34 0000               # Save registers ra and s0 - s7 on the stack.
  35 0000               #
  36 0000 23BDFFD8		addi 	$sp, $sp, -A_FRAMESIZE
  37 0004 AFBF0024		sw 	$ra, -4+A_FRAMESIZE($sp)
  38 0008 AFB7001C		sw 	$s7, 28($sp)
  39 000c AFB60018		sw 	$s6, 24($sp)
  40 0010 AFB50014		sw 	$s5, 20($sp)
  41 0014 AFB40010		sw 	$s4, 16($sp)
  42 0018 AFB3000C		sw 	$s3, 12($sp)
  43 001c AFB20008		sw 	$s2, 8($sp)
  44 0020 AFB10004		sw 	$s1, 4($sp)
  45 0024 AFB00000		sw 	$s0, 0($sp)
  46 0028               	
  47 0028               # ##### BEGIN STUDENT CODE BLOCK 1 #####
  48 0028               
  49 0028 8C94000C		lw $s4, 12($a0)		# string length
  50 002c 2294FFFF		addi $s4, $s4, -1
  51 0030 8C950000		lw $s5, 0($a0)		# addr 1
  52 0034 8C960004		lw $s6, 4($a0)		# addr 2
  53 0038 8C970008		lw $s7, 8($a0)		# save addr
  54 003c               
  55 003c               loop:
  56 003c               
  57 003c 02A06821		move $t5, $s5
  58 0040 02C07021		move $t6, $s6
  59 0044 02E07821		move $t7, $s7
  60 0048 02B46820		add $t5, $s5, $s4
  61 004c 02D47020		add $t6, $s6, $s4
  62 0050 02F47820		add $t7, $s7, $s4
  63 0054 81B10000		lb $s1, 0($t5)	# number 1
  64 0058 81D20000		lb $s2, 0($t6)	# number 2
  65 005c               	
  66 005c 2229FFD0		addi $t1, $s1, -48	# subtract both by 48 to get non ascii
  67 0060 224AFFD0		addi $t2, $s2, -48
  68 0064               
  69 0064 0008C02A		slt $t8, $zero, $t0
  70 0068 17000001		bne $t8, $zero, sub_one
  71 006c 0800001E		j not_carry
  72 0070               
  73 0070               sub_one:
  74 0070               	
  75 0070 01284822		sub $t1, $t1, $t0
  76 0074 2108FFFF		addi $t0, $t0, -1
  77 0078               
  78 0078               not_carry:
  79 0078               
  80 0078 012A5822		sub $t3, $t1, $t2	# subtract by eachother
  81 007c               
  82 007c 0160C02A		slt $t8, $t3, $zero
  83 0080 17000001		bne $t8, $zero, carry
  84 0084 0800002A		j else
  85 0088               
  86 0088               carry:
  87 0088               
  88 0088 2294FFFF		addi $s4, $s4, -1	# go back one to do the math
  89 008c 02A06821		move $t5, $s5
  90 0090 02B46820		add $t5, $s5, $s4
  91 0094 81B10000		lb $s1, 0($t5)
  92 0098               
  93 0098 2229FFFF		addi $t1, $s1, -1
  94 009c               	
  95 009c 22940001		addi $s4, $s4, 1
  96 00a0               	
  97 00a0 216B000A		addi $t3, $t3, 10
  98 00a4 21080001		addi $t0, $t0, 1	# carry over subtraction
  99 00a8               
 100 00a8               else:
 101 00a8               
 102 00a8 216B0030		addi $t3, $t3, 48	# turn number to ascii
 103 00ac               
 104 00ac A1EB0000		sb $t3, 0($t7)		# save to return address 
 105 00b0               
 106 00b0 11940002		beq $t4, $s4, exit
 107 00b4 2294FFFF		addi $s4, $s4, -1
 108 00b8 0800000F		j loop
 109 00bc               	
 110 00bc               exit:
 111 00bc               
 112 00bc               	
 113 00bc               
 114 00bc               # ###### END STUDENT CODE BLOCK 1 ######
 115 00bc               
 116 00bc               #
 117 00bc               # Restore registers ra and s0 - s7 from the stack.
 118 00bc               #
 119 00bc 8FBF0024		lw 	$ra, -4+A_FRAMESIZE($sp)
 120 00c0 8FB7001C		lw 	$s7, 28($sp)
 121 00c4 8FB60018		lw 	$s6, 24($sp)
 122 00c8 8FB50014		lw 	$s5, 20($sp)
 123 00cc 8FB40010		lw 	$s4, 16($sp)
 124 00d0 8FB3000C		lw 	$s3, 12($sp)
 125 00d4 8FB20008		lw 	$s2, 8($sp)
 126 00d8 8FB10004		lw 	$s1, 4($sp)
 127 00dc 8FB00000		lw 	$s0, 0($sp)
 128 00e0 23BD0028		addi 	$sp, $sp, A_FRAMESIZE
 129 00e4               
 130 00e4 03E00008		jr	$ra			# Return to the caller.


      Name         F  Value   M V Sect.         References
-----------------  - -------- - - ----- --------------------------
A_FRAMESIZE          00000028 =         @   31,  36,  37, 119, 128
carry                00000088 R   text  @   83,  86
else                 000000A8 R   text  @   84, 100
exit                 000000BC R   text  @  106, 110
loop                 0000003C R   text  @   55, 108
not_carry            00000078 R   text  @   71,  78
sub_ascii_numbers    00000000 R G text  @   28,  30
sub_one              00000070 R   text  @   70,  73
